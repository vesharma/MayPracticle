---
- hosts: localhost
  become: true

  #Plan:
  # Download latest package
  # Copy Setup from jumpserver to tmp location
  # install zip through yum
  # extract file in /opt/appdynamics
  # replace Controller.xml

  vars:
    Setuplocation: "/root/AppdSetup"
    javaagent: "AppServerAgent-*.zip"
    machineagent: "machineagent-bundle-64bit-linux-*.zip"
    netvizagent: " "
    hostnamevar: "<appdcontrollername.onefiserv.net"
    nodenamevars: " "
    applicationnamevar: "Rulemanager-dit1"
    tiernamevars: 'RMA'
    keyvar: "a923rzf2"
    destvar: "/tmp/appdynamics"
    Deploymentlocation: "/opt/appdynamics"
    modevar: "775"

  tasks:
    - name: Test ping
      ping:

    - name: 1. copy javaagent in location
      copy:
        src: "{{ Setuplocation }}/{{ item }}"
        dest: "{{ destvar }}"
        mode: 775
        remote_src: yes
        force: yes
        fail_on_missing: yes
      register: outputcopy
      failed_when: false
      with_items:
        - "{{ machineagent }}"

    - debug:
        msg: " {{ Setuplocation }}/{{ machineagent }}"

    - name: installing zip with yum
      yum:
        name: unzip
        state: latest
      register: yumoutput
      changed_when: yumoutput.rc != 0

    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 775
        recurse: yes
      with_items:
        - /opt/appdynamics/machine-agent
        - /opt/appdynamics/java-agent

    - name: extract setup in /opt/appdynamics
      unarchive:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - {
            src: "/tmp/appdynamics/machineagent-bundle-64bit-linux-*.zip",
            dest: "/opt/appdynamics/machine-agent",
            mode: "775",
          }
        - {
            src: "/tmp/appdynamics/AppServerAgent*.zip",
            dest: "/opt/appdynamics/java-agent",
            mode: "775",
          }

    - name: For taking backup
      copy:
        src: "{{ item }}"
        dest: "{{ item }}_{{ansible_date_time.date}}_{{ansible_date_time.time}}"
        backup: true
      with_items:
        - "/opt/appdynamics/machine-agent/conf/controller-info.xml"
        - "/opt/appdynamics/java-agent/conf/controller-info.xml"
        - "/opt/appdynamics/java-agent/ver2*/conf/controller-info.xml"

    - name: For replacing /opt/appdynamics/machine-agent/conf/controller-info.xml values
      replace:
        path: "/opt/appdynamics/machine-agent/conf/controller-info.xml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - {
            regexp: "<controller-host></controller-host>",
            replace: "<controller-host>{{ hostnamevar }}</controller-host>",
          }
        - {
            regexp: "<controller-port></controller-port>",
            replace: "<controller-port>443</controller-port>",
          }
        - {
            regexp: "<controller-ssl-enabled></controller-ssl-enabled>",
            replace: "<controller-ssl-enabled>true</controller-ssl-enabled>",
          }
        - {
            regexp: "<application-name></application-name>",
            replace: "<application-name>{{applicationnamevar}}</application-name>",
          }
        - {
            regexp: "<tier-name></tier-name>",
            replace: "<tier-name>{{ tiernamevars }}</tier-name>",
          }
        - {
            regexp: "<node-name></node-name>",
            replace: "<node-name>{{ nodenamevars }}</node-name>",
          }
        - {
            regexp: "<account-name></account-name>",
            replace: "<account-name>customer1</account-name>",
          }
        - {
            regexp: "<account-access-key></account-access-key>",
            replace: "<account-access-key>{{ keyvar }}</account-access-key>",
          }
      register: javaagentoutput
      ignore_errors: yes
      changed_when: false

    - name: For replacing /opt/appdynamics/java-agent/conf/controller-info.xml values
      replace:
        path: "/opt/appdynamics/java-agent/conf/controller-info.xml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - {
            regexp: "<controller-host></controller-host>",
            replace: "<controller-host>{{ hostnamevar }}</controller-host>",
          }
        - {
            regexp: "<controller-port></controller-port>",
            replace: "<controller-port>443</controller-port>",
          }
        - {
            regexp: "<controller-ssl-enabled></controller-ssl-enabled>",
            replace: "<controller-ssl-enabled>true</controller-ssl-enabled>",
          }
        - {
            regexp: "<application-name></application-name>",
            replace: "<application-name>{{ applicationnamevar }}</application-name>",
          }
        - {
            regexp: "<tier-name></tier-name>",
            replace: "<tier-name>{{ tiernamevars }}</tier-name>",
          }
        - {
            regexp: "<node-name></node-name>",
            replace: "<node-name>{{ nodenamevars }}</node-name>",
          }
        - {
            regexp: "<account-name></account-name>",
            replace: "<account-name>customer1</account-name>",
          }
        - {
            regexp: "<account-access-key></account-access-key>",
            replace: "<account-access-key> {{ keyvar}} </account-access-key>",
          }
      register: javaagentoutput
      changed_when: false

    - name: For replacing /opt/appdynamics/java-agent/ver2*/conf/controller-info.xml values
      replace:
        path: "/opt/appdynamics/java-agent/ver2*/conf/controller-info.xml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - {
            regexp: "<controller-host></controller-host>",
            replace: "<controller-host>{{ hostnamevar }}</controller-host>",
          }
        - {
            regexp: "<controller-port></controller-port>",
            replace: "<controller-port>443</controller-port>",
          }
        - {
            regexp: "<controller-ssl-enabled></controller-ssl-enabled>",
            replace: "<controller-ssl-enabled>true</controller-ssl-enabled>",
          }
        - {
            regexp: "<application-name></application-name>",
            replace: "<application-name>{{ applicationnamevar }}</application-name>",
          }
        - {
            regexp: "<tier-name></tier-name>",
            replace: "<tier-name>{{ tiernamevars }}</tier-name>",
          }
        - {
            regexp: "<node-name></node-name>",
            replace: "<node-name>{{ nodenamevars }}</node-name>",
          }
        - {
            regexp: "<account-name></account-name>",
            replace: "<account-name>customer1</account-name>",
          }
        - {
            regexp: "<account-access-key></account-access-key>",
            replace: "<account-access-key>{{ keyvar }}</account-access-key>",
          }
      register: Outputjavaagent1
      ignore_errors: yes
      changed_when: false

    - name: Set user and file permissions
      file:
        path: "{{ item }}"
        mode: 775
        owner: appdynamics-machine-agent
        group: appdynamics-machine-agent
        recurse: yes
      with_items:
        - /opt/appdynamics/machine-agent
      register: FilePermissionvar
      changed_when: false

    - name: Service setup
      copy:
        src: "/opt/appdynamics/machine-agent/etc/systemd/system/appdynamics-machine-agent.service"
        dest: "/etc/systemd/system"
        owner: root
        group: root
        mode: 775
        remote_src: yes

    - name: appdynamics-machine-agent.services reload
      systemd:
        state: restarted
        daemon_reload: yes
        name: appdynamics-machine-agent

    - name: reload daemon
      shell: systemctl daemon-reload

    - name: service start
      service:
        name: appdynamics-machine-agent
        state: restarted
